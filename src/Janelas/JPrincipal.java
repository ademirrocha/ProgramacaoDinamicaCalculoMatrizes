/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Janelas;

import Classes.Matriz;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author Ronaldo
 */
public class JPrincipal extends javax.swing.JFrame {

    private int p[];
    private int s[][];
    private int n;
    private int contador;
    private ArrayList matrizes;
    public static String tela;

    /**
     * Creates new form Principal
     */
    public JPrincipal() {
        initComponents();
        this.contador = 1;
        this.matrizes = new ArrayList();
        tela = null;


    }

    public static void mostrarTela() {

        if (tela == null) {
            new JPrincipal().setVisible(true);
            tela = "instanciada";
        }
    }

    private void adiconarMatriz() {
        if (contador == 1) {
            Matriz matriz = new Matriz();
            matriz.setLinhas(Integer.parseInt(txfLinhaA.getText().trim()));
            matriz.setColunas(Integer.parseInt(txfColunaA.getText().trim()));
            this.matrizes.add(matriz);
            this.contador++;
            alteraA(this.contador);
        } else if (this.matrizes.size() > 0 && verificaDimensoes()) {
            Matriz matriz = new Matriz();
            matriz.setLinhas(Integer.parseInt(txfLinhaA.getText()));
            matriz.setColunas(Integer.parseInt(txfColunaA.getText()));
            this.matrizes.add(matriz);
            this.contador++;
            alteraA(this.contador);
        } else {
            JOptionPane.showMessageDialog(null, "Dimensões incompatíveis! ", "ERRO!", JOptionPane.ERROR_MESSAGE);
        }




    }

    public boolean verificaDimensoes() {
        boolean retorno = false;
        int ultimoIndice = this.matrizes.size() - 1;

        if (((Matriz) this.matrizes.get(ultimoIndice)).getColunas() == Integer.parseInt(txfLinhaA.getText().trim())) {
            retorno = true;
        }


        return retorno;
    }

    private void exibeMatrizes() {

        String str = "<html>";
        for (int i = 0; i < this.matrizes.size(); i++) {
            str += "A" + (i + 1) + " " + ((Matriz) matrizes.get(i)).getLinhas() + " x " + ((Matriz) matrizes.get(i)).getColunas() + "<br>";
        }
        str += "</html>";
        lblMatrizes.setText(str);
    }

    private void alteraA(int contador) {
        lblNomeMatriz.setText("A" + contador);
    }

    private void limpaCampos() {
        txfLinhaA.setText("");
        txfColunaA.setText("");
    }

    public void validaNumero(javax.swing.JTextField Numero) {
        long valor;
        if (Numero.getText().length() != 0) {
            try {
                valor = Long.parseLong(Numero.getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Esse Campo só aceita números", "Erro", JOptionPane.ERROR_MESSAGE);
                Numero.setText("");
                Numero.grabFocus();
            }
        }
    }

    private void carregaDadosEntrada() {
        p = new int[this.matrizes.size() + 1];

        for (int i = 0; i < p.length; i++) {
            if (i == 0) {
                p[i] = ((Matriz) matrizes.get(i)).getLinhas();
            } else if (i > 0 && i < p.length - 1) {
                p[i] = ((Matriz) matrizes.get(i)).getLinhas();
            } else {
                p[i] = ((Matriz) matrizes.get(i - 1)).getColunas();
            }



        }




    }

    private void calculaMelhorCusto() {
        this.s = Matriz.MatrixChainOrder(p);
    }

    private int[][] calculaMelhorCustoRecursivo() {
        Matriz matriz = new Matriz();
        matriz.inicializaRecursiveMatrixChain(p);
        matriz.recursiveMatrixChain(p, 0, p.length - 2);
        return matriz.getS();
    }

    private void exibeResultado() {
        Matriz matriz = new Matriz();
        this.n = this.p.length - 1;
        lblResultado.setText("A melhor colocação de parênteses é: " + matriz.printOptmalParents(this.s, 0, n - 1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblTempo = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnM1 = new javax.swing.JButton();
        btnM3 = new javax.swing.JButton();
        lblNomeMatriz = new javax.swing.JLabel();
        txfLinhaA = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txfColunaA = new javax.swing.JTextField();
        btnExecutar = new javax.swing.JButton();
        lblResultado = new javax.swing.JLabel();
        lblMatrizes = new javax.swing.JLabel();
        btnLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto Matriz");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setText("Digite as dimensões das matrizes:");

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnM1.setText("Prog. Dinâmica");
        btnM1.setToolTipText("");
        btnM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnM1ActionPerformed(evt);
            }
        });

        btnM3.setText("Método Recursivo");
        btnM3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnM3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnM3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnM1)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnM1)
                .addGap(35, 35, 35)
                .addComponent(btnM3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblNomeMatriz.setText("A1");

        txfLinhaA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfLinhaAFocusLost(evt);
            }
        });

        jLabel3.setText("x");

        txfColunaA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfColunaAFocusLost(evt);
            }
        });

        btnExecutar.setText("Adicionar Matriz");
        btnExecutar.setActionCommand("Adicionar");
        btnExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(377, 377, 377))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblNomeMatriz)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txfLinhaA, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(jLabel3)
                                        .addGap(10, 10, 10)
                                        .addComponent(txfColunaA, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnExecutar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnLimpar))
                                    .addComponent(lblMatrizes))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblResultado)
                            .addComponent(lblTempo))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNomeMatriz, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txfLinhaA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(txfColunaA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExecutar)
                            .addComponent(btnLimpar))
                        .addGap(18, 18, 18)
                        .addComponent(lblMatrizes)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 154, Short.MAX_VALUE)
                .addComponent(lblResultado)
                .addGap(18, 18, 18)
                .addComponent(lblTempo)
                .addGap(65, 65, 65))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutarActionPerformed
        this.adiconarMatriz();
        exibeMatrizes();
        limpaCampos();
        lblNomeMatriz.setText("A" + Integer.toString(contador));

    }//GEN-LAST:event_btnExecutarActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.tela = null;
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void btnM1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnM1ActionPerformed
        if (this.matrizes.size() > 1) {
            carregaDadosEntrada();
            long start = System.nanoTime();
            calculaMelhorCusto();
            long finish = System.nanoTime();
            lblTempo.setText("Tempo de execução em nanosegundos: " + Long.toString(finish - start));
            exibeResultado();
        } else {
            JOptionPane.showMessageDialog(null, "Adicione, pelo menos, duas matrizes! ", "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnM1ActionPerformed

    private void btnM3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnM3ActionPerformed
        if (this.matrizes.size() > 1) {
            carregaDadosEntrada();
            long start = System.nanoTime();
            this.s = calculaMelhorCustoRecursivo();
            long finish = System.nanoTime();
            lblTempo.setText("Tempo de execução em nanosegundos: " + Long.toString(finish - start));
            exibeResultado();
        } else {
            JOptionPane.showMessageDialog(null, "Adicione, pelo menos, duas matrizes! ", "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnM3ActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        this.matrizes = new ArrayList();
        lblMatrizes.setText("");
        txfColunaA.setText("");
        txfLinhaA.setText("");
        lblNomeMatriz.setText("A1");
        lblResultado.setText("");
        lblTempo.setText("");
        this.contador = 1;
    }//GEN-LAST:event_btnLimparActionPerformed

    private void txfLinhaAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfLinhaAFocusLost
      this.validaNumero(txfLinhaA);
    }//GEN-LAST:event_txfLinhaAFocusLost

    private void txfColunaAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfColunaAFocusLost
        this.validaNumero(txfColunaA);
    }//GEN-LAST:event_txfColunaAFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JPrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExecutar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnM1;
    private javax.swing.JButton btnM3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblMatrizes;
    private javax.swing.JLabel lblNomeMatriz;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JLabel lblTempo;
    private javax.swing.JTextField txfColunaA;
    private javax.swing.JTextField txfLinhaA;
    // End of variables declaration//GEN-END:variables
}
